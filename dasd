Help on AnalysisIndicators in module pandas_ta.core object:

class AAnnaallyyssiissIInnddiiccaattoorrss(BasePandasObject)
 |  AnalysisIndicators(pandas_obj)
 |  
 |  This Pandas Extension is named 'ta' for Technical Analysis. In other words,
 |  it is a Numerical Time Series Feature Generator where the Time Series data
 |  is biased towards Financial Market data; typical data includes columns
 |  named :"open", "high", "low", "close", "volume".
 |  
 |  This TA Library hopefully allows you to apply familiar and unique Technical
 |  Analysis Indicators easily with the DataFrame Extension named 'ta'. Even
 |  though 'ta' is a Pandas DataFrame Extension, you can still call Technical
 |  Analysis indicators individually if you are more comfortable with that
 |  approach or it allows you to easily and automatically apply the indicators
 |  with the strategy method. See: help(ta.strategy).
 |  
 |  By default, the 'ta' extension uses lower case column names: open, high,
 |  low, close, and volume. You can override the defaults by providing the it's
 |  replacement name when calling the indicator. For example, to call the
 |  indicator hl2().
 |  
 |  With 'default' columns: open, high, low, close, and volume.
 |  >>> df.ta.hl2()
 |  >>> df.ta(kind="hl2")
 |  
 |  With DataFrame columns: Open, High, Low, Close, and Volume.
 |  >>> df.ta.hl2(high="High", low="Low")
 |  >>> df.ta(kind="hl2", high="High", low="Low")
 |  
 |  If you do not want to use a DataFrame Extension, just call it normally.
 |  >>> sma10 = ta.sma(df["Close"]) # Default length=10
 |  >>> sma50 = ta.sma(df["Close"], length=50)
 |  >>> ichimoku, span = ta.ichimoku(df["High"], df["Low"], df["Close"])
 |  
 |  Args:
 |      kind (str, optional): Default: None. Kind is the 'name' of the indicator.
 |          It converts kind to lowercase before calling.
 |      timed (bool, optional): Default: False. Curious about the execution
 |          speed?
 |      kwargs: Extension specific modifiers.
 |          append (bool, optional): Default: False. When True, it appends the
 |          resultant column(s) to the DataFrame.
 |  
 |  Returns:
 |      Most Indicators will return a Pandas Series. Others like MACD, BBANDS,
 |      KC, et al will return a Pandas DataFrame. Ichimoku on the other hand
 |      will return two DataFrames, the Ichimoku DataFrame for the known period
 |      and a Span DataFrame for the future of the Span values.
 |  
 |  Let's get started!
 |  
 |  1. Loading the 'ta' module:
 |  >>> import pandas as pd
 |  >>> import ta as ta
 |  
 |  2. Load some data:
 |  >>> df = pd.read_csv("AAPL.csv", index_col="date", parse_dates=True)
 |  
 |  3. Help!
 |  3a. General Help:
 |  >>> help(df.ta)
 |  >>> df.ta()
 |  3b. Indicator Help:
 |  >>> help(ta.apo)
 |  3c. Indicator Extension Help:
 |  >>> help(df.ta.apo)
 |  
 |  4. Ways of calling an indicator.
 |  4a. Standard: Calling just the APO indicator without "ta" DataFrame extension.
 |  >>> ta.apo(df["close"])
 |  4b. DataFrame Extension: Calling just the APO indicator with "ta" DataFrame extension.
 |  >>> df.ta.apo()
 |  4c. DataFrame Extension (kind): Calling APO using 'kind'
 |  >>> df.ta(kind="apo")
 |  4d. Strategy:
 |  >>> df.ta.strategy("All") # Default
 |  >>> df.ta.strategy(ta.Strategy("My Strat", ta=[{"kind": "apo"}])) # Custom
 |  
 |  5. Working with kwargs
 |  5a. Append the result to the working df.
 |  >>> df.ta.apo(append=True)
 |  5b. Timing an indicator.
 |  >>> apo = df.ta(kind="apo", timed=True)
 |  >>> print(apo.timed)
 |  
 |  Method resolution order:
 |      AnalysisIndicators
 |      BasePandasObject
 |      pandas.core.base.PandasObject
 |      pandas.core.accessor.DirNamesMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  ____ccaallll____(self, kind: str = None, timed: bool = False, version: bool = False, **kwargs)
 |      Call self as a function.
 |  
 |  ____iinniitt____(self, pandas_obj)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  aabbeerrrraattiioonn(self, length=None, atr_length=None, offset=None, **kwargs)
 |      # Volatility
 |  
 |  aabboovvee(self, asint=True, offset=None, **kwargs)
 |      # Utility
 |  
 |  aabboovvee__vvaalluuee(self, value=None, asint=True, offset=None, **kwargs)
 |  
 |  aaccccbbaannddss(self, length=None, c=None, mamode=None, offset=None, **kwargs)
 |  
 |  aadd(self, open_=None, signed=True, offset=None, **kwargs)
 |      # Volume
 |  
 |  aaddoosscc(self, open_=None, fast=None, slow=None, signed=True, offset=None, **kwargs)
 |  
 |  aaddxx(self, length=None, lensig=None, mamode=None, scalar=None, drift=None, offset=None, **kwargs)
 |      # Trend
 |  
 |  aallmmaa(self, length=None, sigma=None, distribution_offset=None, offset=None, **kwargs)
 |      # Overlap
 |  
 |  aammaatt(self, fast=None, slow=None, mamode=None, lookback=None, offset=None, **kwargs)
 |  
 |  aaoo(self, fast=None, slow=None, offset=None, **kwargs)
 |      # Momentum
 |  
 |  aaoobbvv(self, fast=None, slow=None, mamode=None, max_lookback=None, min_lookback=None, offset=None, **kwargs)
 |  
 |  aappoo(self, fast=None, slow=None, mamode=None, offset=None, **kwargs)
 |  
 |  aarroooonn(self, length=None, scalar=None, offset=None, **kwargs)
 |  
 |  aattrr(self, length=None, mamode=None, offset=None, **kwargs)
 |  
 |  bbbbaannddss(self, length=None, std=None, mamode=None, offset=None, **kwargs)
 |  
 |  bbeellooww(self, asint=True, offset=None, **kwargs)
 |  
 |  bbeellooww__vvaalluuee(self, value=None, asint=True, offset=None, **kwargs)
 |  
 |  bbiiaass(self, length=None, mamode=None, offset=None, **kwargs)
 |  
 |  bboopp(self, percentage=False, offset=None, **kwargs)
 |  
 |  bbrraarr(self, length=None, scalar=None, drift=None, offset=None, **kwargs)
 |  
 |  ccccii(self, length=None, c=None, offset=None, **kwargs)
 |  
 |  ccddll__ppaatttteerrnn(self, name='all', offset=None, **kwargs)
 |      # Public DataFrame Methods: Indicators and Utilities
 |      # Candles
 |  
 |  ccddll__zz(self, full=None, offset=None, **kwargs)
 |  
 |  ccffoo(self, length=None, offset=None, **kwargs)
 |  
 |  ccgg(self, length=None, offset=None, **kwargs)
 |  
 |  cchhoopp(self, length=None, atr_length=None, scalar=None, drift=None, offset=None, **kwargs)
 |  
 |  cckksspp(self, p=None, x=None, q=None, mamode=None, offset=None, **kwargs)
 |  
 |  ccmmff(self, open_=None, length=None, offset=None, **kwargs)
 |  
 |  ccmmoo(self, length=None, scalar=None, drift=None, offset=None, **kwargs)
 |  
 |  ccoonnssttaannttss(self, append: bool, values: list)
 |      Constants
 |      
 |      Add or remove constants to the DataFrame easily with Numpy's arrays or
 |      lists. Useful when you need easily accessible horizontal lines for
 |      charting.
 |      
 |      Add constant '1' to the DataFrame
 |      >>> df.ta.constants(True, [1])
 |      Remove constant '1' to the DataFrame
 |      >>> df.ta.constants(False, [1])
 |      
 |      Adding constants for charting
 |      >>> import numpy as np
 |      >>> chart_lines = np.append(np.arange(-4, 5, 1), np.arange(-100, 110, 10))
 |      >>> df.ta.constants(True, chart_lines)
 |      Removing some constants from the DataFrame
 |      >>> df.ta.constants(False, np.array([-60, -40, 40, 60]))
 |      
 |      Args:
 |          append (bool): If True, appends a Numpy range of constants to the
 |              working DataFrame.  If False, it removes the constant range from
 |              the working DataFrame. Default: None.
 |      
 |      Returns:
 |          Returns the appended constants
 |          Returns nothing to the user.  Either adds or removes constant ranges
 |          from the working DataFrame.
 |  
 |  ccooppppoocckk(self, length=None, fast=None, slow=None, offset=None, **kwargs)
 |  
 |  ccrroossss(self, above=True, asint=True, offset=None, **kwargs)
 |  
 |  ccrroossss__vvaalluuee(self, value=None, above=True, asint=True, offset=None, **kwargs)
 |  
 |  ccttii(self, length=None, offset=None, **kwargs)
 |  
 |  ddeeccaayy(self, length=None, mode=None, offset=None, **kwargs)
 |  
 |  ddeeccrreeaassiinngg(self, length=None, strict=None, asint=None, offset=None, **kwargs)
 |  
 |  ddeemmaa(self, length=None, offset=None, **kwargs)
 |  
 |  ddmm(self, drift=None, offset=None, mamode=None, **kwargs)
 |  
 |  ddoonncchhiiaann(self, lower_length=None, upper_length=None, offset=None, **kwargs)
 |  
 |  ddppoo(self, length=None, centered=True, offset=None, **kwargs)
 |  
 |  eebbssww(self, close=None, length=None, bars=None, offset=None, **kwargs)
 |      # Cycles
 |  
 |  eeffii(self, length=None, mamode=None, offset=None, drift=None, **kwargs)
 |  
 |  eemmaa(self, length=None, offset=None, **kwargs)
 |  
 |  eennttrrooppyy(self, length=None, base=None, offset=None, **kwargs)
 |      # Statistics
 |  
 |  eeoomm(self, length=None, divisor=None, offset=None, drift=None, **kwargs)
 |  
 |  eerr(self, length=None, drift=None, offset=None, **kwargs)
 |  
 |  eerrii(self, length=None, offset=None, **kwargs)
 |  
 |  ffiisshheerr(self, length=None, signal=None, offset=None, **kwargs)
 |  
 |  ffwwmmaa(self, length=None, offset=None, **kwargs)
 |  
 |  hhaa(self, offset=None, **kwargs)
 |  
 |  hhiilloo(self, high_length=None, low_length=None, mamode=None, offset=None, **kwargs)
 |  
 |  hhll22(self, offset=None, **kwargs)
 |  
 |  hhllcc33(self, offset=None, **kwargs)
 |  
 |  hhmmaa(self, length=None, offset=None, **kwargs)
 |  
 |  hhwwcc(self, na=None, nb=None, nc=None, nd=None, scalar=None, offset=None, **kwargs)
 |  
 |  hhwwmmaa(self, na=None, nb=None, nc=None, offset=None, **kwargs)
 |  
 |  iicchhiimmookkuu(self, tenkan=None, kijun=None, senkou=None, include_chikou=True, offset=None, **kwargs)
 |  
 |  iinnccrreeaassiinngg(self, length=None, strict=None, asint=None, offset=None, **kwargs)
 |  
 |  iinnddiiccaattoorrss(self, **kwargs)
 |      List of Indicators
 |      
 |      kwargs:
 |          as_list (bool, optional): When True, it returns a list of the
 |              indicators. Default: False.
 |          exclude (list, optional): The passed in list will be excluded
 |              from the indicators list. Default: None.
 |      
 |      Returns:
 |          Prints the list of indicators. If as_list=True, then a list.
 |  
 |  iinneerrttiiaa(self, length=None, rvi_length=None, scalar=None, refined=None, thirds=None, mamode=None, drift=None, offset=None, **kwargs)
 |  
 |  jjmmaa(self, length=None, phase=None, offset=None, **kwargs)
 |  
 |  kkaammaa(self, length=None, fast=None, slow=None, offset=None, **kwargs)
 |  
 |  kkcc(self, length=None, scalar=None, mamode=None, offset=None, **kwargs)
 |  
 |  kkddjj(self, length=None, signal=None, offset=None, **kwargs)
 |  
 |  kksstt(self, roc1=None, roc2=None, roc3=None, roc4=None, sma1=None, sma2=None, sma3=None, sma4=None, signal=None, offset=None, **kwargs)
 |  
 |  kkuurrttoossiiss(self, length=None, offset=None, **kwargs)
 |  
 |  kkvvoo(self, fast=None, slow=None, length_sig=None, mamode=None, offset=None, drift=None, **kwargs)
 |  
 |  lliinnrreegg(self, length=None, offset=None, adjust=None, **kwargs)
 |  
 |  lloogg__rreettuurrnn(self, length=None, cumulative=False, percent=False, offset=None, **kwargs)
 |      # Performance
 |  
 |  lloonngg__rruunn(self, fast=None, slow=None, length=None, offset=None, **kwargs)
 |  
 |  mmaaccdd(self, fast=None, slow=None, signal=None, offset=None, **kwargs)
 |  
 |  mmaadd(self, length=None, offset=None, **kwargs)
 |  
 |  mmaassssii(self, fast=None, slow=None, offset=None, **kwargs)
 |  
 |  mmccggdd(self, length=None, offset=None, **kwargs)
 |  
 |  mmeeddiiaann(self, length=None, offset=None, **kwargs)
 |  
 |  mmffii(self, length=None, drift=None, offset=None, **kwargs)
 |  
 |  mmiiddppooiinntt(self, length=None, offset=None, **kwargs)
 |  
 |  mmiiddpprriiccee(self, length=None, offset=None, **kwargs)
 |  
 |  mmoomm(self, length=None, offset=None, **kwargs)
 |  
 |  nnaattrr(self, length=None, mamode=None, scalar=None, offset=None, **kwargs)
 |  
 |  nnvvii(self, length=None, initial=None, signed=True, offset=None, **kwargs)
 |  
 |  oobbvv(self, offset=None, **kwargs)
 |  
 |  oohhllcc44(self, offset=None, **kwargs)
 |  
 |  ppddiisstt(self, drift=None, offset=None, **kwargs)
 |  
 |  ppeerrcceenntt__rreettuurrnn(self, length=None, cumulative=False, percent=False, offset=None, **kwargs)
 |  
 |  ppggoo(self, length=None, offset=None, **kwargs)
 |  
 |  ppppoo(self, fast=None, slow=None, scalar=None, mamode=None, offset=None, **kwargs)
 |  
 |  ppssaarr(self, af0=None, af=None, max_af=None, offset=None, **kwargs)
 |  
 |  ppssll(self, open_=None, length=None, scalar=None, drift=None, offset=None, **kwargs)
 |  
 |  ppvvii(self, length=None, initial=None, signed=True, offset=None, **kwargs)
 |  
 |  ppvvoo(self, fast=None, slow=None, signal=None, scalar=None, offset=None, **kwargs)
 |  
 |  ppvvooll(self, volume=None, offset=None, **kwargs)
 |  
 |  ppvvrr(self, **kwargs)
 |  
 |  ppvvtt(self, offset=None, **kwargs)
 |  
 |  ppwwmmaa(self, length=None, offset=None, **kwargs)
 |  
 |  qqqqee(self, length=None, smooth=None, factor=None, mamode=None, offset=None, **kwargs)
 |  
 |  qqssttiicckk(self, length=None, offset=None, **kwargs)
 |  
 |  qquuaannttiillee(self, length=None, q=None, offset=None, **kwargs)
 |  
 |  rrmmaa(self, length=None, offset=None, **kwargs)
 |  
 |  rroocc(self, length=None, offset=None, **kwargs)
 |  
 |  rrssii(self, length=None, scalar=None, drift=None, offset=None, **kwargs)
 |  
 |  rrssxx(self, length=None, drift=None, offset=None, **kwargs)
 |  
 |  rrvvggii(self, length=None, swma_length=None, offset=None, **kwargs)
 |  
 |  rrvvii(self, length=None, scalar=None, refined=None, thirds=None, mamode=None, drift=None, offset=None, **kwargs)
 |  
 |  sshhoorrtt__rruunn(self, fast=None, slow=None, length=None, offset=None, **kwargs)
 |  
 |  ssiinnwwmmaa(self, length=None, offset=None, **kwargs)
 |  
 |  sskkeeww(self, length=None, offset=None, **kwargs)
 |  
 |  ssllooppee(self, length=None, offset=None, **kwargs)
 |  
 |  ssmmaa(self, length=None, offset=None, **kwargs)
 |  
 |  ssmmii(self, fast=None, slow=None, signal=None, scalar=None, offset=None, **kwargs)
 |  
 |  ssqquueeeezzee(self, bb_length=None, bb_std=None, kc_length=None, kc_scalar=None, mom_length=None, mom_smooth=None, use_tr=None, mamode=None, offset=None, **kwargs)
 |  
 |  ssqquueeeezzee__pprroo(self, bb_length=None, bb_std=None, kc_length=None, kc_scalar_wide=None, kc_scalar_normal=None, kc_scalar_narrow=None, mom_length=None, mom_smooth=None, use_tr=None, mamode=None, offset=None, **kwargs)
 |  
 |  ssssff(self, length=None, poles=None, offset=None, **kwargs)
 |  
 |  ssttcc(self, ma1=None, ma2=None, osc=None, tclength=None, fast=None, slow=None, factor=None, offset=None, **kwargs)
 |  
 |  ssttddeevv(self, length=None, offset=None, **kwargs)
 |  
 |  ssttoocchh(self, fast_k=None, slow_k=None, slow_d=None, mamode=None, offset=None, **kwargs)
 |  
 |  ssttoocchhrrssii(self, length=None, rsi_length=None, k=None, d=None, mamode=None, offset=None, **kwargs)
 |  
 |  ssttrraatteeggyy(self, *args, **kwargs)
 |      Strategy Method
 |      
 |      An experimental method that by default runs all applicable indicators.
 |      Future implementations will allow more specific indicator generation
 |      with possibly as json, yaml config file or an sqlite3 table.
 |      
 |      
 |      Kwargs:
 |          chunksize (bool): Adjust the chunksize for the Multiprocessing Pool.
 |              Default: Number of cores of the OS
 |          exclude (list): List of indicator names to exclude. Some are
 |              excluded by default for various reasons; they require additional
 |              sources, performance (td_seq), not a ohlcv chart (vp) etc.
 |          name (str): Select all indicators or indicators by
 |              Category such as: "candles", "cycles", "momentum", "overlap",
 |              "performance", "statistics", "trend", "volatility", "volume", or
 |              "all". Default: "all"
 |          ordered (bool): Whether to run "all" in order. Default: True
 |          timed (bool): Show the process time of the strategy().
 |              Default: False
 |          verbose (bool): Provide some additional insight on the progress of
 |              the strategy() execution. Default: False
 |  
 |  ssuuppeerrttrreenndd(self, period=None, multiplier=None, mamode=None, drift=None, offset=None, **kwargs)
 |  
 |  sswwmmaa(self, length=None, offset=None, **kwargs)
 |  
 |  tt33(self, length=None, a=None, offset=None, **kwargs)
 |  
 |  ttdd__sseeqq(self, asint=None, offset=None, show_all=None, **kwargs)
 |  
 |  tteemmaa(self, length=None, offset=None, **kwargs)
 |  
 |  tthheerrmmoo(self, long=None, short=None, length=None, mamode=None, drift=None, offset=None, **kwargs)
 |  
 |  ttiicckkeerr(self, ticker: str, **kwargs)
 |      ticker
 |      
 |      This method downloads Historical Data if the package yfinance is installed.
 |      Additionally it can run a ta.Strategy; Builtin or Custom. It returns a
 |      DataFrame if there the DataFrame is not empty, otherwise it exits. For
 |      additional yfinance arguments, use help(ta.yf).
 |      
 |      Historical Data
 |      >>> df = df.ta.ticker("aapl")
 |      More specifically
 |      >>> df = df.ta.ticker("aapl", period="max", interval="1d", kind=None)
 |      
 |      Changing the period of Historical Data
 |      Period is used instead of start/end
 |      >>> df = df.ta.ticker("aapl", period="1y")
 |      
 |      Changing the period and interval of Historical Data
 |      Retrieves the past year in weeks
 |      >>> df = df.ta.ticker("aapl", period="1y", interval="1wk")
 |      Retrieves the past month in hours
 |      >>> df = df.ta.ticker("aapl", period="1mo", interval="1h")
 |      
 |      Show everything
 |      >>> df = df.ta.ticker("aapl", kind="all")
 |      
 |      Args:
 |          ticker (str): Any string for a ticker you would use with yfinance.
 |              Default: "SPY"
 |      Kwargs:
 |          kind (str): Options see above. Default: "history"
 |          ds (str): Data Source to use. Default: "yahoo"
 |          strategy (str | ta.Strategy): Which strategy to apply after
 |              downloading chart history. Default: None
 |      
 |          See help(ta.yf) for additional kwargs
 |      
 |      Returns:
 |          Exits if the DataFrame is empty or None
 |          Otherwise it returns a DataFrame
 |  
 |  ttooss__ssttddeevvaallll(self, length=None, stds=None, offset=None, **kwargs)
 |  
 |  ttrriimmaa(self, length=None, offset=None, **kwargs)
 |  
 |  ttrriixx(self, length=None, signal=None, scalar=None, drift=None, offset=None, **kwargs)
 |  
 |  ttrruuee__rraannggee(self, drift=None, offset=None, **kwargs)
 |  
 |  ttssii(self, fast=None, slow=None, drift=None, mamode=None, offset=None, **kwargs)
 |  
 |  ttssiiggnnaallss(self, trend=None, asbool=None, trend_reset=None, trend_offset=None, offset=None, **kwargs)
 |  
 |  ttttmm__ttrreenndd(self, length=None, offset=None, **kwargs)
 |  
 |  uuii(self, length=None, scalar=None, offset=None, **kwargs)
 |  
 |  uuoo(self, fast=None, medium=None, slow=None, fast_w=None, medium_w=None, slow_w=None, drift=None, offset=None, **kwargs)
 |  
 |  vvaarriiaannccee(self, length=None, offset=None, **kwargs)
 |  
 |  vvhhff(self, length=None, drift=None, offset=None, **kwargs)
 |  
 |  vviiddyyaa(self, length=None, offset=None, **kwargs)
 |  
 |  vvoorrtteexx(self, drift=None, offset=None, **kwargs)
 |  
 |  vvpp(self, width=None, percent=None, **kwargs)
 |  
 |  vvwwaapp(self, anchor=None, offset=None, **kwargs)
 |  
 |  vvwwmmaa(self, volume=None, length=None, offset=None, **kwargs)
 |  
 |  wwccpp(self, offset=None, **kwargs)
 |  
 |  wwiillllrr(self, length=None, percentage=True, offset=None, **kwargs)
 |  
 |  wwmmaa(self, length=None, offset=None, **kwargs)
 |  
 |  xxssiiggnnaallss(self, signal=None, xa=None, xb=None, above=None, long=None, asbool=None, trend_reset=None, trend_offset=None, offset=None, **kwargs)
 |  
 |  zzllmmaa(self, length=None, mamode=None, offset=None, **kwargs)
 |  
 |  zzssccoorree(self, length=None, std=None, offset=None, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  ccaatteeggoorriieess
 |      Returns the categories.
 |  
 |  ddaatteettiimmee__oorrddeerreedd
 |      Returns True if the index is a datetime and ordered.
 |  
 |  llaasstt__rruunn
 |      Returns the time when the DataFrame was last run.
 |  
 |  rreevveerrssee
 |      Reverses the DataFrame. Simply: df.iloc[::-1]
 |  
 |  ttoo__uuttcc
 |      Sets the DataFrame index to UTC format
 |  
 |  vveerrssiioonn
 |      Returns the version.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  aaddjjuusstteedd
 |      property: df.ta.adjusted
 |  
 |  ccoorreess
 |      Returns the categories.
 |  
 |  eexxcchhaannggee
 |      Returns the current Exchange. Default: "NYSE".
 |  
 |  ttiimmee__rraannggee
 |      Returns the time ranges of the DataFrame as a float. Default is in "years". help(ta.toal_time)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ____aannnnoottaattiioonnss____ = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.PandasObject:
 |  
 |  ____rreepprr____(self) -> 'str'
 |      Return a string representation for a particular object.
 |  
 |  ____ssiizzeeooff____(self) -> 'int'
 |      Generates the total memory usage for an object that returns
 |      either a value or Series of values
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  ____ddiirr____(self) -> 'list[str]'
 |      Provide method name lookup and completion.
 |      
 |      Notes
 |      -----
 |      Only provide 'public' methods.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
